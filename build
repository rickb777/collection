#!/bin/bash -e
cd $(dirname $BASH_SOURCE)
BASE=$PWD

FIRST=$(go env GOPATH | cut -d: -f1)
PATH=$FIRST/bin:$PATH
RVSN=v3.10.1
RUNTPL=runtemplate-$RVSN
if [[ -n $1 ]]; then RUNTPL=$1; fi

function getVersionedTool
{
  if [ ! -x $FIRST/bin/$2-$3 ]; then
    echo go get $1@$3
    go get $1@$3
    cd $FIRST/bin
    cp -v $2 $2-$3
    cd -
  fi
}

getVersionedTool github.com/rickb777/runtemplate/v3 runtemplate $RVSN

core="Stringer:true Comparable:true GobEncode:true"
int="Ordered:true Integer:true"
enc=""

function generateGroup
{
    echo $1
    cd $1

    $RUNTPL -f -v -tpl $2/collection.tpl  Type=string ToSet:false $core      MapTo:int
    $RUNTPL -f -v -tpl $2/collection.tpl  Type=int    ToSet:false $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/collection.tpl  Type=uint   ToSet:false $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/collection.tpl  Type=int64  ToSet:false $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/collection.tpl  Type=uint64 ToSet:false $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/collection.tpl 'Type=interface{}/Any/nil' ToSet:false $core

    $RUNTPL -f -v -tpl $2/list.tpl        Type=string ToSet:true  $core      MapTo:int
    $RUNTPL -f -v -tpl $2/list.tpl        Type=int    ToSet:true  $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/list.tpl        Type=uint   ToSet:true  $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/list.tpl        Type=int64  ToSet:true  $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/list.tpl        Type=uint64 ToSet:true  $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/list.tpl       'Type=interface{}/Any/nil' ToSet:true $core

    $RUNTPL -f -v -tpl $2/set.tpl         Type=string ToList:true $core      MapTo:int
    $RUNTPL -f -v -tpl $2/set.tpl         Type=int    ToList:true $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/set.tpl         Type=uint   ToList:true $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/set.tpl         Type=int64  ToList:true $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/set.tpl         Type=uint64 ToList:true $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/set.tpl        'Type=interface{}/Any/nil' ToList:true $core

    $RUNTPL -f -v -tpl $2/map.tpl -o string_string_map.go Key=string  Type=string $core "KeyList=${3}StringList" "ValueList=${3}StringList" $4
    $RUNTPL -f -v -tpl $2/map.tpl -o string_int_map.go    Key=string  Type=int    $core "KeyList=${3}StringList" "ValueList=${3}IntList"    $4
    $RUNTPL -f -v -tpl $2/map.tpl -o string_uint_map.go   Key=string  Type=uint   $core "KeyList=${3}StringList" "ValueList=${3}UintList"   $4
    $RUNTPL -f -v -tpl $2/map.tpl -o string_any_map.go    Key=string 'Type=interface{}/Any/nil' $core "KeyList=${3}StringList" "ValueList=${3}AnyList" $4

    $RUNTPL -f -v -tpl $2/map.tpl -o int_string_map.go    Key=int     Type=string $core "KeyList=${3}IntList"    "ValueList=${3}StringList" $4
    $RUNTPL -f -v -tpl $2/map.tpl -o uint_string_map.go   Key=uint    Type=string $core "KeyList=${3}UintList"   "ValueList=${3}StringList" $4
    $RUNTPL -f -v -tpl $2/map.tpl -o int64_string_map.go  Key=int64   Type=string $core "KeyList=${3}Int64List"  "ValueList=${3}StringList" $4
    $RUNTPL -f -v -tpl $2/map.tpl -o uint64_string_map.go Key=uint64  Type=string $core "KeyList=${3}Uint64List" "ValueList=${3}StringList" $4

    $RUNTPL -f -v -tpl $2/map.tpl -o int_int_map.go       Key=int     Type=int    $core $int "KeyList=${3}IntList"    "ValueList=${3}IntList"    $4
    $RUNTPL -f -v -tpl $2/map.tpl -o uint_uint_map.go     Key=uint    Type=uint   $core $int "KeyList=${3}UintList"   "ValueList=${3}UintList"   $4
    $RUNTPL -f -v -tpl $2/map.tpl -o int64_int64_map.go   Key=int64   Type=int64  $core $int "KeyList=${3}Int64List"  "ValueList=${3}Int64List"  $4
    $RUNTPL -f -v -tpl $2/map.tpl -o uint64_uint64_map.go Key=uint64  Type=uint64 $core $int "KeyList=${3}Uint64List" "ValueList=${3}Uint64List" $4

    cd $BASE
    echo
}

function generateQueues
{
    cd $1
    echo $1

    $RUNTPL -f -v -tpl $2/queue.tpl  Type=string               ToList:$3 ToSet:$3 $core      MapTo:int
    $RUNTPL -f -v -tpl $2/queue.tpl  Type=int                  ToList:$3 ToSet:$3 $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/queue.tpl  Type=uint                 ToList:$3 ToSet:$3 $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/queue.tpl  Type=int64                ToList:$3 ToSet:$3 $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/queue.tpl  Type=uint64               ToList:$3 ToSet:$3 $core $int MapTo:string
    $RUNTPL -f -v -tpl $2/queue.tpl 'Type=interface{}/Any/nil' ToList:$3 ToSet:$3 $core

    cd $BASE
    echo
}

for d in . immutable shared; do
  rm -f $d/*_collection.go $d/*_list.go $d/*_map.go $d/*_set.go $d/*_queue.go
done

generateGroup  .         simple     ''
generateGroup  immutable immutable  'collection.' 'Import:"github.com/rickb777/collection"'
generateGroup  shared    threadsafe 'collection.' 'Import:"github.com/rickb777/collection"'

generateQueues .         fast       false
generateQueues shared    threadsafe true

#$RUNTPL -tpl types/stringy.tpl         Prefix=X1 Type=Email SortableSlice:true
#$RUNTPL -tpl plumbing/plumbing.tpl     Prefix=X1 Type=Apple
#$RUNTPL -tpl plumbing/mapTo.tpl        Prefix=X1 Type=Apple ToPrefix=X1 ToType=Pear

gofmt -l -w *.go */*.go
go test ./...
go vet  ./...
